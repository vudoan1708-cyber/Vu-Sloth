# -*- coding: utf-8 -*-
"""DCGAN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AS2TWY9n0ACVBr-_bNe84N4xQ8B8OgKj
"""

""" Please be aware that those code lines which start with a ! is a command bash line, not an actual code """

import tensorflow as tf
from tensorflow.keras import layers

import glob
import imageio
import matplotlib.pyplot as plt
import numpy as np
import os
import PIL
import time

from IPython import display
import PIL

# loading my dataset here

########################
# SYNTAX ONLY AVAILABLE FOR GOOGLE COLAB
# mount google drive
from google.colab import drive
drive.mount('/content/gdrive')

# remove a folder
# !rm -rf dataset
# unzip dataset folder
!unzip '/content/gdrive/MyDrive/AI-Assets/GAN/dataset.zip' > /dev/null
#######################

# Global Variables
AUTOTUNE = tf.data.experimental.AUTOTUNE
# BUFFER_SIZE = 60000
BATCH_SIZE = 32
IMAGE_SIZE = 256
IMAGE_CHANNELS = 3

assert IMAGE_SIZE % 4 == 0

# Get All The Files
filenames = tf.io.gfile.glob('/content/dataset/Sloth/*')
filenames.extend(tf.io.gfile.glob('/content/dataset/Vu/*'))
# print(filenames)

IMG_CNT = len(filenames)
print(f"Total Number of Vu and Sloth Images for Training: {IMG_CNT}")

# Batch and shuffle the data
train_ds = tf.data.Dataset.from_tensor_slices(filenames)

# # Load and Prepare the MNIST dataset
# (train_images, train_labels), (_, _) = tf.keras.datasets.mnist.load_data()

for f in train_ds.take(5):
  print(f.numpy())

# train_images = train_images.reshape(train_images.shape[0], 28, 28, 1).astype('float32')
# train_images = (train_images - 127.5) / 127.5  # Normalize the images to [-1, 1]

# Normalise images to [-1, 1]
def Normalise(image):
  image = (image - 127.5) / 127.5
  return image

# Decode images
def DecodeImg(img):
  # convert the compressed string to a 3D uint8 tensor
  img = tf.cond(
          tf.image.is_jpeg(img),
          lambda: tf.image.decode_jpeg(img, IMAGE_CHANNELS),
          lambda: tf.image.decode_png(img, IMAGE_CHANNELS))
  # img = tf.image.decode_jpeg(img, channels=3)
  # resize the image to the desired size
  img = tf.image.resize(img, [IMAGE_SIZE, IMAGE_SIZE])
  # Use `convert_image_dtype` to convert to floats in the [-1,1] range.
  img = Normalise(img)
  return img

def ProcessPath(file_path):
  image = tf.io.read_file(file_path)
  image = DecodeImg(image)
  return image

# train_dataset = tf.data.Dataset.from_tensor_slices(train_images).shuffle(BUFFER_SIZE).batch(BATCH_SIZE)
train_ds = train_ds.map(ProcessPath, num_parallel_calls=AUTOTUNE).shuffle(IMG_CNT).cache().batch(BATCH_SIZE)

image_batch = next(iter(train_ds))
image_batch.shape

# Show batch of images
def show_batch(image_batch):
    plt.figure(figsize=(10,10))
    for n in range(25):
        ax = plt.subplot(5,5,n+1)
        plt.imshow(image_batch[n])
        plt.axis("off")
    plt.show()

show_batch(image_batch)

EPOCHS = 25000
noise_dim = 100
num_examples_to_generate = 16

# We will reuse this seed overtime (so it's easier)
# to visualize progress in the animated GIF)
seed = tf.random.normal([num_examples_to_generate, noise_dim])

def make_generator_model():
    model = tf.keras.Sequential()
    # model.add(layers.Dense(7*7*1024, use_bias=False, input_shape=(100,)))
    # model.add(layers.BatchNormalization())
    # model.add(layers.LeakyReLU())

    # model.add(layers.Reshape((7, 7, 1024)))
    # assert model.output_shape == (None, 7, 7, 1024)  # Note: None is the batch size

    # model.add(layers.Conv2DTranspose(512, (5, 5), strides=(1, 1), padding='same', use_bias=False))
    # assert model.output_shape == (None, 7, 7, 512)
    # model.add(layers.BatchNormalization())
    # model.add(layers.LeakyReLU())

    # model.add(layers.Conv2DTranspose(256, (5, 5), strides=(2, 2), padding='same', use_bias=False))
    # assert model.output_shape == (None, 14, 14, 256)
    # model.add(layers.BatchNormalization())
    # model.add(layers.LeakyReLU())

    # model.add(layers.Conv2DTranspose(128, (5, 5), strides=(2, 2), padding='same', use_bias=False))
    # assert model.output_shape == (None, 28, 28, 128)
    # model.add(layers.BatchNormalization())
    # model.add(layers.LeakyReLU())

    # model.add(layers.Conv2DTranspose(64, (5, 5), strides=(2, 2), padding='same', use_bias=False))
    # assert model.output_shape == (None, 56, 56, 64)
    # model.add(layers.BatchNormalization())
    # model.add(layers.LeakyReLU())

    # model.add(layers.Conv2DTranspose(IMG_CHANNELS, (5, 5), strides=(2, 2), padding='same', use_bias=False, activation='tanh'))
    # assert model.output_shape == (None, 112, 112, IMG_CHANNELS)

    model = tf.keras.Sequential()

    n = IMAGE_SIZE // 4

    model.add(layers.Dense(n * n * 256, use_bias=False, input_shape=(100,)))
    model.add(layers.BatchNormalization())
    model.add(layers.LeakyReLU())

    model.add(layers.Reshape((n, n, 256)))
    # assert model.output_shape == (None, 7, 7, 256)  # Note: None is the batch size

    model.add(layers.Conv2DTranspose(128, (5, 5), strides=(1, 1), padding='same', use_bias=False))
    # assert model.output_shape == (None, 7, 7, 128)
    model.add(layers.BatchNormalization())
    model.add(layers.LeakyReLU())

    model.add(layers.Conv2DTranspose(64, (5, 5), strides=(2, 2), padding='same', use_bias=False))
    # assert model.output_shape == (None, 14, 14, 64)
    model.add(layers.BatchNormalization())
    model.add(layers.LeakyReLU())

    model.add(layers.Conv2DTranspose(IMAGE_CHANNELS, (5, 5), strides=(2, 2), padding='same', use_bias=False, activation='tanh'))
    # assert model.output_shape == (None, 28, 28, 3)

    return model

generator = make_generator_model()

noise = tf.random.normal([BATCH_SIZE, noise_dim])
generated_image = generator(noise, training=False)

plt.imshow(generated_image[0])
plt.show()

def make_discriminator_model():
    model = tf.keras.Sequential()
    model.add(layers.Conv2D(64, (5, 5), strides=(2, 2), padding='same',
                                     input_shape=[IMAGE_SIZE, IMAGE_SIZE, IMAGE_CHANNELS]))
    model.add(layers.LeakyReLU())
    model.add(layers.Dropout(0.3))

    model.add(layers.Conv2D(128, (5, 5), strides=(2, 2), padding='same'))
    model.add(layers.LeakyReLU())
    model.add(layers.Dropout(0.3))

    model.add(layers.Conv2D(256, (5, 5), strides=(2, 2), padding='same'))
    model.add(layers.LeakyReLU())
    model.add(layers.Dropout(0.3))
    
    model.add(layers.Conv2D(512, (5, 5), strides=(2, 2), padding='same'))
    model.add(layers.LeakyReLU())
    model.add(layers.Dropout(0.3))

    model.add(layers.Flatten())
    model.add(layers.Dense(1))

    return model

discriminator = make_discriminator_model()
decision = discriminator(generated_image)
print (decision)

# This method returns a helper function to compute cross entropy loss
cross_entropy = tf.keras.losses.BinaryCrossentropy(from_logits=True)

# Calculate the discriminator loss
def discriminator_loss(real_output, fake_output):
    real_loss = cross_entropy(tf.ones_like(real_output), real_output)
    fake_loss = cross_entropy(tf.zeros_like(fake_output), fake_output)
    total_loss = real_loss + fake_loss
    return total_loss

# Calculate the generator loss
def generator_loss(fake_output):
    return cross_entropy(tf.ones_like(fake_output), fake_output)

generator_optimizer = tf.keras.optimizers.Adam(1e-4)
discriminator_optimizer = tf.keras.optimizers.Adam(1e-4)

# Save checkpoints in case a long running training task is interrupted
checkpoint_dir = '/content/gdrive/MyDrive/AI-Assets/GAN/training_checkpoints'
checkpoint_prefix = os.path.join(checkpoint_dir, "ckpt")
checkpoint = tf.train.Checkpoint(generator_optimizer=generator_optimizer,
                                 discriminator_optimizer=discriminator_optimizer,
                                 generator=generator,
                                 discriminator=discriminator)

checkpoint.restore(tf.train.latest_checkpoint(checkpoint_dir))

# Notice the use of `tf.function`
# This annotation causes the function to be "compiled".
@tf.function
def train_step(images):
    noise = tf.random.normal([BATCH_SIZE, noise_dim])

    with tf.GradientTape() as gen_tape, tf.GradientTape() as disc_tape:
      generated_images = generator(noise, training=True)

      real_output = discriminator(images, training=True)
      fake_output = discriminator(generated_images, training=True)

      gen_loss = generator_loss(fake_output)
      disc_loss = discriminator_loss(real_output, fake_output)

    gradients_of_generator = gen_tape.gradient(gen_loss, generator.trainable_variables)
    gradients_of_discriminator = disc_tape.gradient(disc_loss, discriminator.trainable_variables)

    generator_optimizer.apply_gradients(zip(gradients_of_generator, generator.trainable_variables))
    discriminator_optimizer.apply_gradients(zip(gradients_of_discriminator, discriminator.trainable_variables))

step = 200

def train(dataset, epochs):
  start_of_training = time.time()
  for epoch in range(epochs):
    start = time.time()

    for image_batch in dataset:
      train_step(image_batch)

    # Produce images for the GIF as you go
    display.clear_output(wait=True)
    generate_and_save_images(generator,
                             epoch + 1,
                             seed)

    # Save the model every 200 epochs
    if (epoch + 1) % step == 0:
      checkpoint.save(file_prefix = checkpoint_prefix)

    print ('Time for epoch {} is {} sec'.format(epoch + 1, time.time()-start))

  # Generate after the final epoch
  display.clear_output(wait=True)
  generate_and_save_images(generator,
                           epochs,
                           seed)
  print ('Time for the entire training to finish with a total number of {} epochs is {} sec'.format(epoch + 1, time.time()-start_of_training))

def generate_and_save_images(model, epoch, test_input):
  # Notice `training` is set to False.
  # This is so all layers run in inference mode (batchnorm).
  predictions = model(test_input, training=False)

  fig = plt.figure(figsize=(4,4))

  for i in range(predictions.shape[0]):
      plt.subplot(4, 4, i+1)
      if predictions.shape[-1] == 3:
            plt.imshow(
                predictions[i] * 0.5 + .5)  # scale image to [0, 1] floats (or you could also scale to [0, 255] ints)
      else:
          plt.imshow(predictions[i, :, :, 0] * 0.5 + .5,
                      cmap='gray')  # scale image to [0, 1] floats (or you could also scale to [0, 255] ints)
      # plt.imshow(predictions[i, :, :, :] * 127.5 + 127.5)
      plt.axis('off')

  # Save the images every 200 epochs
  if (epoch) % step == 0: 
    plt.savefig('/content/gdrive/MyDrive/AI-Assets/GAN/image_at_each_200_epoch/image_at_epoch_{:04d}.png'.format(epoch))
  plt.show()

train(train_ds, EPOCHS)

# Create a GIF
# Display a single image using the epoch number
def display_image(epoch_no):
  return PIL.Image.open('/content/gdrive/MyDrive/AI-Assets/GAN/image_at_each_200_epoch/image_at_epoch_{:04d}.png'.format(epoch_no))

# Display the latest image (25,000 / 200 = 125)
display_image(EPOCHS / step)

import matplotlib.animation as animation
from IPython.display import HTML

anim_file = 'dcgan.gif'

with imageio.get_writer(anim_file, mode='I') as writer:
    filenames = glob.glob('image*.png')
    filenames = sorted(filenames)
    for filename in filenames:
        image = imageio.imread(filename)
        writer.append_data(image)
        image = imageio.imread(filename)
        writer.append_data(image)

import tensorflow_docs.vis.embed as embed
embed.embed_file(anim_file)